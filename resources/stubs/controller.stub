<?php

namespace {{namespace}};

use App\Http\Controllers\Controller;
use {{rootNamespace}}Http\Requests\{{store.request}};
use {{rootNamespace}}Http\Requests\{{update.request}};
use {{rootNamespace}}Models\{{model}};
{{additionalUses}}

class {{class}} extends Controller
{
	/**
	 * Display a listing of {{resource}}.
	 */
	public function index({{additionalModelBindings}})
	{
		$this->authorize('viewAny', {{model}}::class);
		${{collection}} = {{model}}::paginate();
		return view('{{module}}::{{viewPath}}.index', compact('{{collection}}'{{additionalModelCompacts}}));
	}

	/**
	 * Show the form for creating a new {{resource}}.
	 */
	public function create({{additionalModelBindings}})
	{
		$this->authorize('create', {{model}}::class);
		return view('{{module}}::{{viewPath}}.create');
	}

	/**
	 * Store a newly created {{resource}} in storage.
	 */
	public function store({{additionalModelBindings:,}}{{model}}StoreRequest $request)
	{
		$this->authorize('create', {{model}}::class);
		${{resource}} = {{model}}::create($request->validated());
		return response()->json(['status' => 'ok', 'message' => 'created', 'id' => ${{resource}}->id]);
	}

	/**
	 * Display the specified {{resource}}.
	 *
	 * @param {{model}} ${{resource}}
	 */
	public function show({{additionalModelBindings:,}}{{model}} ${{resource}})
	{
		$this->authorize('view', ${{resource}});
		return view('{{module}}::{{viewPath}}.show', compact('{{resource}}'));
	}

	/**
	 * Show the form for editing the specified {{resource}}.
	 *
	 * @param {{model}} ${{resource}}
     */
    public function edit({{additionalModelBindings:,}}{{model}} ${{resource}})
	{
		$this->authorize('update', ${{resource}});

		return view('{{module}}::{{viewPath}}.edit', compact('{{resource}}'));
	}

	/**
	 * Update the specified {{resource}} in storage.
	 *
	 * @param {{model}}  ${{resource}}
     */
    public function update({{additionalModelBindings:,}}{{model}}UpdateRequest $request, {{model}} ${{resource}})
	{
		$this->authorize('update', ${{resource}});

		${{resource}}->update($request->validated());
		return response()->json(['status' => 'ok', 'message' => 'updated', 'id' => ${{resource}}->id]);
	}

	/**
	 * Remove the specified {{resource}} from storage.
	 *
	 * @param {{model}}  ${{resource}}
	 */
	public function destroy({{additionalModelBindings:,}}{{model}} ${{resource}})
	{
		$this->authorize('delete', ${{resource}});

		$id = ${{resource}}->id;
		${{resource}}->delete();
		return response()->json(['status' => 'ok', 'message' => 'destroyed', 'id' => $id]);
	}
}
